/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.7).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.AnonymUserData;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-04-24T07:50:52.967Z[GMT]")
@Api(value = "admin", description = "the admin API")
public interface AdminApi {

    @ApiOperation(value = "get list of user and thier anonymous data", nickname = "getUsers", notes = "get the anonymous data of the users", response = AnonymUserData.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of anonymous user data", response = AnonymUserData.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request. Parameters not valid."),
        @ApiResponse(code = 401, message = "Authorization information is missing or invalid.") })
    @RequestMapping(value = "/admin/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<AnonymUserData>> getUsers(@Min(0)@ApiParam(value = "The number of items to skip before starting to collect the result set.", allowableValues = "") @Valid @RequestParam(value = "offset", required = false) Integer offset,@Min(1) @Max(20) @ApiParam(value = "The numbers of items to return.", allowableValues = "") @Valid @RequestParam(value = "limit", required = false) Integer limit);

}
