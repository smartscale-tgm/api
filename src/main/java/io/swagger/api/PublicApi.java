/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.7).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Authenticate;
import io.swagger.model.Jwt;
import io.swagger.model.RegisterData;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-04-24T07:50:52.967Z[GMT]")
@Api(value = "public", description = "the public API")
public interface PublicApi {

    @ApiOperation(value = "authenticate user with email and password", nickname = "authenticate", notes = "authenticate the user with email and password and returns an JWT token", response = Jwt.class, tags={ "public", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Sucessfully authenticated", response = Jwt.class),
        @ApiResponse(code = 400, message = "Wrong email/password combination") })
    @RequestMapping(value = "/public/authenticate",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Jwt> authenticate(@ApiParam(value = "The authenticate details" ,required=true )  @Valid @RequestBody Authenticate body);


    @ApiOperation(value = "Checks if the server is running", nickname = "publicPingGet", notes = "", tags={ "public", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Server is up and running"),
        @ApiResponse(code = 200, message = "Something is wrong") })
    @RequestMapping(value = "/public/ping",
        method = RequestMethod.GET)
    ResponseEntity<Void> publicPingGet();


    @ApiOperation(value = "register new user", nickname = "register", notes = "", tags={ "public", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully registered"),
        @ApiResponse(code = 400, message = "User input wrong") })
    @RequestMapping(value = "/public/register",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> register(@ApiParam(value = "" ,required=true )  @Valid @RequestBody RegisterData body);


    @ApiOperation(value = "renew the jwt token", nickname = "renewToken", notes = "", response = Jwt.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "public", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Renews the JWT token", response = Jwt.class) })
    @RequestMapping(value = "/public/renewToken",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Jwt> renewToken();

}
