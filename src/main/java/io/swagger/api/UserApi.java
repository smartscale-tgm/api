/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.7).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.StepEntry;
import io.swagger.model.UserData;
import io.swagger.model.WeightEntry;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-04-24T07:50:52.967Z[GMT]")
@Api(value = "user", description = "the user API")
public interface UserApi {

    @ApiOperation(value = "get the current user", nickname = "getCurrentUser", notes = "gets the details of the current user", response = UserData.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "current user data", response = UserData.class),
        @ApiResponse(code = 401, message = "Authorization information is missing or invalid.") })
    @RequestMapping(value = "/user/profile",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UserData> getCurrentUser();


    @ApiOperation(value = "get the history of steps per day", nickname = "getStepHistory", notes = "gets the step history with skip and limit", response = StepEntry.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "step history", response = StepEntry.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request. Parameters not valid."),
        @ApiResponse(code = 401, message = "Authorization information is missing or invalid."),
        @ApiResponse(code = 500, message = "Unexpected error.") })
    @RequestMapping(value = "/user/stephistory",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<StepEntry>> getStepHistory(@Min(0)@ApiParam(value = "The number of items to skip before starting to collect the result set.", allowableValues = "") @Valid @RequestParam(value = "offset", required = false) Integer offset,@Min(1) @Max(20) @ApiParam(value = "The numbers of items to return.", allowableValues = "") @Valid @RequestParam(value = "limit", required = false) Integer limit);


    @ApiOperation(value = "get the history of weight scales", nickname = "getWeightHistory", notes = "gets the weight history with skip and limit", response = WeightEntry.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "weight history", response = WeightEntry.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request. Parameters not valid."),
        @ApiResponse(code = 401, message = "Authorization information is missing or invalid."),
        @ApiResponse(code = 500, message = "Unexpected error.") })
    @RequestMapping(value = "/user/weighthistory",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<WeightEntry>> getWeightHistory(@Min(0)@ApiParam(value = "The number of items to skip before starting to collect the result set.", allowableValues = "") @Valid @RequestParam(value = "offset", required = false) Integer offset,@Min(1) @Max(20) @ApiParam(value = "The numbers of items to return.", allowableValues = "") @Valid @RequestParam(value = "limit", required = false) Integer limit);


    @ApiOperation(value = "insert data from user", nickname = "insertUserData", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successsfully inserted data"),
        @ApiResponse(code = 400, message = "Bad request. Parameters not valid."),
        @ApiResponse(code = 401, message = "Authorization information is missing or invalid.") })
    @RequestMapping(value = "/user/insertData",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> insertUserData(@ApiParam(value = "The data to insert" ,required=true )  @Valid @RequestBody StepEntry body);

}
